// Real-time Dataset Exporter
// Export ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

import JSZip from 'jszip';
import { GeneratedImage } from '../components/PreviewGrid';

export interface ExportConfig {
  outputPath: string;
  projectName: string;
  imageFormat: 'png' | 'jpg';
  organizationMode: 'by_font' | 'by_text_type' | 'flat';
  enableRealTimeExport: boolean;
  batchSize: number;
  singleDownload: boolean;  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à
  useGPU: boolean;          // ‡πÉ‡∏ä‡πâ GPU acceleration
  maxConcurrentFonts: number; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
}

export interface ExportProgress {
  totalImages: number;
  exportedImages: number;
  currentFont: string;
  currentBatch: number;
  totalBatches: number;
  isExporting: boolean;
  lastExportedFile: string;
}

export class RealTimeExporter {
  private config: ExportConfig;
  private exportQueue: GeneratedImage[] = [];
  private allImages: GeneratedImage[] = [];  // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  private isProcessing: boolean = false;
  private exportedCount: number = 0;
  private currentBatch: number = 0;
  private onProgressCallback?: (progress: ExportProgress) => void;
  private gpuCanvas?: OffscreenCanvas;  // Canvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPU
  private gpuContext?: OffscreenCanvasRenderingContext2D;

  constructor(config: ExportConfig) {
    this.config = config;
    this.initializeGPU();
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô GPU acceleration
  private async initializeGPU(): Promise<void> {
    if (!this.config.useGPU) return;
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á OffscreenCanvas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPU processing
      this.gpuCanvas = new OffscreenCanvas(800, 600);
      this.gpuContext = this.gpuCanvas.getContext('2d');
      
      if (this.gpuContext) {
        console.log('üöÄ GPU acceleration initialized');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è GPU acceleration not available, falling back to CPU:', error);
      this.config.useGPU = false;
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress
  setProgressCallback(callback: (progress: ExportProgress) => void) {
    this.onProgressCallback = callback;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤ collection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export
  async addToExportQueue(image: GeneratedImage): Promise<void> {
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    this.allImages.push(image);
    
    console.log(`üì• Added image: ${image.text.substring(0, 20)}... (Total: ${this.allImages.length})`);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ single download ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (this.config.singleDownload) {
      // ‡πÅ‡∏Ñ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress
      this.updateProgress(image);
      return;
    }
    
    // ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (batch download)
    this.exportQueue.push(image);
    if (!this.isProcessing && this.config.enableRealTimeExport) {
      this.startProcessing();
    }
  }

  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  async downloadAll(): Promise<void> {
    if (this.allImages.length === 0) {
      console.warn('‚ö†Ô∏è No images to download');
      return;
    }

    console.log(`üì¶ Starting single download of ${this.allImages.length} images...`);
    
    try {
      const zip = new JSZip();
      
      // üìÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° effect ‡πÅ‡∏•‡∏∞ font
      const imagesByFontAndEffect = this.groupImagesByFontAndEffect(this.allImages);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞ effect
      for (const [fontName, effectGroups] of Object.entries(imagesByFontAndEffect)) {
        const sanitizedFontName = fontName.replace(/[^a-zA-Z0-9-_]/g, '_');
        
        for (const [effectType, images] of Object.entries(effectGroups)) {
          const sanitizedEffectName = effectType.replace(/[^a-zA-Z0-9-_]/g, '_');
          
          images.forEach((image, index) => {
            // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            const customFileName = image.fileName || `${sanitizedFontName}_${(index + 1).toString().padStart(5, '0')}_${sanitizedEffectName}`;
            const filename = `${customFileName}.${this.config.imageFormat}`;
            const folderPath = `fonts/${sanitizedFontName}/${sanitizedEffectName}/${filename}`;
            
            // ‡πÅ‡∏õ‡∏•‡∏á dataURL ‡πÄ‡∏õ‡πá‡∏ô base64
            const base64Data = image.dataUrl.split(',')[1];
            zip.file(folderPath, base64Data, {base64: true});
          });
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ effect
          const labels = this.createLabelsForImages(images, fontName, effectType);
          zip.file(`fonts/${sanitizedFontName}/${sanitizedEffectName}/labels.json`, JSON.stringify(labels, null, 2));
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        const fontSummary = this.createFontSummary(effectGroups, fontName);
        zip.file(`fonts/${sanitizedFontName}/font_summary.json`, JSON.stringify(fontSummary, null, 2));
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
      const statistics = this.generateStatistics();
      zip.file('statistics.json', JSON.stringify(statistics, null, 2));
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
      zip.file('README.md', this.generateReadme());
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ZIP
      const content = await zip.generateAsync({
        type: 'blob',
        compression: 'DEFLATE',
        compressionOptions: { level: 6 }
      });
      
      const timestamp = new Date().toISOString().split('T')[0];
      const filename = `${this.config.projectName}_${timestamp}_${this.allImages.length}images.zip`;
      
      // ‡πÉ‡∏ä‡πâ FileSaver.js ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
      const { saveAs } = await import('file-saver');
      saveAs(content, filename);
      
      console.log(`‚úÖ Downloaded: ${filename} (${this.allImages.length} images)`);
      
    } catch (error) {
      console.error('‚ùå Download failed:', error);
      throw error;
    }
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ process queue
  private async startProcessing(): Promise<void> {
    if (this.isProcessing) return;
    
    this.isProcessing = true;
    console.log('üöÄ Starting real-time export processing...');
    
    while (this.exportQueue.length > 0) {
      const batch = this.exportQueue.splice(0, this.config.batchSize);
      await this.processBatch(batch);
      
      // Update progress
      this.updateProgress();
      
      // Small delay to prevent overwhelming the system
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    this.isProcessing = false;
    console.log('‚úÖ Real-time export processing completed');
  }

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• batch
  private async processBatch(batch: GeneratedImage[]): Promise<void> {
    this.currentBatch++;
    
    console.log(`üì¶ Processing batch ${this.currentBatch} with ${batch.length} images...`);
    
    const promises = batch.map(async (image, index) => {
      try {
        await this.exportSingleImage(image);
        this.exportedCount++;
        
        // Update progress for each image
        this.updateProgress(image);
        
      } catch (error) {
        console.error(`‚ùå Failed to export image ${index + 1} in batch ${this.currentBatch}:`, error);
      }
    });
    
    await Promise.all(promises);
    console.log(`‚úÖ Batch ${this.currentBatch} completed`);
  }

  // Export ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  private async exportSingleImage(image: GeneratedImage): Promise<void> {
    const filePath = this.generateFilePath(image);
    
    try {
      // Convert data URL to blob
      const response = await fetch(image.dataUrl);
      const blob = await response.blob();
      
      // Export ‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ô browser environment ‡∏à‡∏∞‡πÉ‡∏ä‡πâ File System Access API ‡∏´‡∏£‡∏∑‡∏≠ download)
      await this.saveImageFile(filePath, blob, image);
      
      console.log(`üíæ Exported: ${filePath}`);
      
    } catch (error) {
      console.error(`‚ùå Export failed for ${filePath}:`, error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á file path
  private generateFilePath(image: GeneratedImage): string {
    const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    const fontName = this.extractFontName(image.font);
    const sanitizedFontName = fontName.replace(/[^a-zA-Z0-9-_]/g, '_');
    const sanitizedProjectName = this.config.projectName.replace(/[^a-zA-Z0-9-_]/g, '_');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique filename
    const imageIndex = this.exportedCount + 1;
    const filename = `${sanitizedFontName}_${imageIndex.toString().padStart(6, '0')}.${this.config.imageFormat}`;
    
    let relativePath = '';
    
    switch (this.config.organizationMode) {
      case 'by_font':
        relativePath = `${sanitizedProjectName}/${timestamp}/fonts/${sanitizedFontName}/${filename}`;
        break;
        
      case 'by_text_type':
        const textType = this.categorizeText(image.text);
        relativePath = `${sanitizedProjectName}/${timestamp}/text_types/${textType}/${filename}`;
        break;
        
      case 'flat':
      default:
        relativePath = `${sanitizedProjectName}/${timestamp}/images/${filename}`;
        break;
    }
    
    return `${this.config.outputPath}/${relativePath}`;
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  private async saveImageFile(filePath: string, blob: Blob, image: GeneratedImage): Promise<void> {
    // ‡πÉ‡∏ô browser environment
    if (typeof window !== 'undefined') {
      // ‡πÉ‡∏ä‡πâ File System Access API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if ('showSaveFilePicker' in window) {
        try {
          await this.saveWithFileSystemAPI(filePath, blob);
          return;
        } catch (error) {
          console.log('File System API not available, using download fallback');
        }
      }
      
      // Fallback: ‡πÉ‡∏ä‡πâ download
      await this.saveWithDownload(filePath, blob);
    } else {
      // ‡πÉ‡∏ô Node.js environment (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      await this.saveWithNodeJS(filePath, blob);
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ File System Access API
  private async saveWithFileSystemAPI(filePath: string, blob: Blob): Promise<void> {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á directory structure
      const pathParts = filePath.split('/');
      const filename = pathParts.pop() || 'image.png';
      
      // ‡πÉ‡∏ô production ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ File System Access API ‡∏à‡∏£‡∏¥‡∏á
      console.log(`üìÅ Would save with File System API: ${filePath}`);
      
      // Placeholder for actual File System API implementation
      // const fileHandle = await window.showSaveFilePicker({
      //   suggestedName: filename,
      //   types: [{
      //     description: 'Images',
      //     accept: { 'image/*': ['.png', '.jpg'] }
      //   }]
      // });
      // const writable = await fileHandle.createWritable();
      // await writable.write(blob);
      // await writable.close();
      
    } catch (error) {
      throw new Error(`File System API save failed: ${error}`);
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ download (fallback)
  private async saveWithDownload(filePath: string, blob: Blob): Promise<void> {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filePath.split('/').pop() || 'image.png';
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô DOM ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    URL.revokeObjectURL(url);
    
    console.log(`‚¨áÔ∏è Downloaded: ${a.download}`);
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Node.js (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö server-side)
  private async saveWithNodeJS(filePath: string, blob: Blob): Promise<void> {
    // Placeholder for Node.js implementation
    console.log(`üñ•Ô∏è Would save with Node.js: ${filePath}`);
    
    // const fs = require('fs').promises;
    // const path = require('path');
    // 
    // // ‡∏™‡∏£‡πâ‡∏≤‡∏á directory ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    // const dir = path.dirname(filePath);
    // await fs.mkdir(dir, { recursive: true });
    // 
    // // ‡πÅ‡∏õ‡∏•‡∏á blob ‡πÄ‡∏õ‡πá‡∏ô buffer
    // const arrayBuffer = await blob.arrayBuffer();
    // const buffer = Buffer.from(arrayBuffer);
    // 
    // // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
    // await fs.writeFile(filePath, buffer);
  }

  // ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  private categorizeText(text: string): string {
    const hasLao = /[\u0E80-\u0EFF]/.test(text);
    const hasEnglish = /[a-zA-Z]/.test(text);
    const hasNumbers = /[0-9]/.test(text);
    const hasPunctuation = /[.,!?;:]/.test(text);
    
    if (hasLao && hasEnglish) return 'mixed_lao_english';
    if (hasLao && hasNumbers) return 'lao_with_numbers';
    if (hasLao) return 'pure_lao';
    if (hasEnglish && hasNumbers) return 'english_with_numbers';
    if (hasEnglish) return 'pure_english';
    if (hasNumbers) return 'numbers_only';
    if (hasPunctuation) return 'punctuation';
    return 'other';
  }

  // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠ font
  private extractFontName(fontString: string): string {
    return fontString
      .replace(/üé®|üéØ|‚úÖ|üîß/g, '')
      .replace(/\s*\(.*\)\s*/g, '')
      .trim();
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress
  private updateProgress(lastImage?: GeneratedImage): void {
    if (!this.onProgressCallback) return;
    
    const progress: ExportProgress = {
      totalImages: this.exportedCount + this.exportQueue.length,
      exportedImages: this.exportedCount,
      currentFont: lastImage ? this.extractFontName(lastImage.font) : '',
      currentBatch: this.currentBatch,
      totalBatches: Math.ceil((this.exportedCount + this.exportQueue.length) / this.config.batchSize),
      isExporting: this.isProcessing,
      lastExportedFile: lastImage ? this.generateFilePath(lastImage) : ''
    };
    
    this.onProgressCallback(progress);
  }

  // Export ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch export)
  async exportAll(images: GeneratedImage[]): Promise<void> {
    console.log(`üì§ Starting batch export of ${images.length} images...`);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ queue
    for (const image of images) {
      this.exportQueue.push(image);
    }
    
    // ‡πÄ‡∏£‡∏¥‡πà‡∏° process
    await this.startProcessing();
    
    console.log(`‚úÖ Batch export completed: ${this.exportedCount} images exported`);
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  getStatistics() {
    return {
      totalExported: this.exportedCount,
      queueLength: this.exportQueue.length,
      currentBatch: this.currentBatch,
      isProcessing: this.isProcessing
    };
  }

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï exporter
  reset(): void {
    this.exportQueue = [];
    this.exportedCount = 0;
    this.currentBatch = 0;
    this.isProcessing = false;
    console.log('üîÑ Real-time exporter reset');
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ export
  stop(): void {
    this.isProcessing = false;
    console.log('‚èπÔ∏è Real-time export stopped');
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞ effect
  private groupImagesByFontAndEffect(images: GeneratedImage[]): Record<string, Record<string, GeneratedImage[]>> {
    const grouped: Record<string, Record<string, GeneratedImage[]>> = {};
    
    images.forEach(image => {
      // ‡πÉ‡∏ä‡πâ fontName ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å font string
      const fontName = image.fontName || this.extractFontName(image.font);
      const effectType = image.effectType || image.style || 'default';
      
      if (!grouped[fontName]) {
        grouped[fontName] = {};
      }
      
      if (!grouped[fontName][effectType]) {
        grouped[fontName][effectType] = [];
      }
      
      grouped[fontName][effectType].push(image);
    });
    
    return grouped;
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏ô‡∏ï‡πå (‡πÄ‡∏Å‡πà‡∏≤ - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility)
  private groupImagesByFont(images: GeneratedImage[]): Record<string, GeneratedImage[]> {
    const grouped: Record<string, GeneratedImage[]> = {};
    
    images.forEach(image => {
      const fontName = image.font || 'unknown';
      if (!grouped[fontName]) {
        grouped[fontName] = [];
      }
      grouped[fontName].push(image);
    });
    
    return grouped;
  }

  // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏à‡∏≤‡∏Å font string
  private extractFontName(fontString: string): string {
    // ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô (PROFESSIONAL), (FORCED), etc.
    return fontString.replace(/\s*\([^)]*\)/g, '').trim();
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå
  private createFontSummary(effectGroups: Record<string, GeneratedImage[]>, fontName: string): any {
    const totalImages = Object.values(effectGroups).reduce((sum, images) => sum + images.length, 0);
    const effects = Object.keys(effectGroups);
    
    return {
      fontName: fontName,
      totalImages: totalImages,
      effects: effects.map(effect => ({
        effectType: effect,
        imageCount: effectGroups[effect].length,
        sampleTexts: effectGroups[effect].slice(0, 5).map(img => img.text)
      })),
      createdAt: new Date().toISOString(),
      structure: {
        description: "Images organized by effect type",
        folders: effects.map(effect => `${effect}/`)
      }
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö effect)
  private createLabelsForImages(images: GeneratedImage[], fontName: string, effectType?: string): any[] {
    return images.map((image, index) => {
      const sanitizedFontName = fontName.replace(/[^a-zA-Z0-9-_]/g, '_');
      const sanitizedEffectName = (effectType || 'default').replace(/[^a-zA-Z0-9-_]/g, '_');
      
      // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      const filename = image.fileName 
        ? `${image.fileName}.${this.config.imageFormat}`
        : `${sanitizedFontName}_${(index + 1).toString().padStart(5, '0')}_${sanitizedEffectName}.${this.config.imageFormat}`;
      
      return {
        filename: filename,
        text: image.text,
        font: fontName,
        effectType: effectType || 'default',
        category: this.categorizeText(image.text),
        syllables: this.estimateSyllables(image.text),
        length: image.text.length,
        hasNumbers: /[‡ªê-‡ªô0-9]/.test(image.text),
        hasEnglish: /[a-zA-Z]/.test(image.text),
        timestamp: image.timestamp || Date.now(),
        index: index + 1,
        metadata: {
          createdAt: new Date().toISOString(),
          textLength: image.text.length,
          hasLaoScript: /[\u0E80-\u0EFF]/.test(image.text),
          effectApplied: effectType || 'none'
        }
      };
    });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
  private generateStatistics(): any {
    const imagesByFont = this.groupImagesByFont(this.allImages);
    const totalImages = this.allImages.length;
    
    const fontStats = Object.entries(imagesByFont).map(([fontName, images]) => ({
      fontName,
      imageCount: images.length,
      percentage: Math.round((images.length / totalImages) * 100)
    }));

    const categories = {};
    this.allImages.forEach(image => {
      const category = this.categorizeText(image.text);
      categories[category] = (categories[category] || 0) + 1;
    });

    return {
      totalImages,
      totalFonts: Object.keys(imagesByFont).length,
      fontStatistics: fontStats,
      categoryDistribution: categories,
      generationInfo: {
        projectName: this.config.projectName,
        imageFormat: this.config.imageFormat,
        organizationMode: this.config.organizationMode,
        useGPU: this.config.useGPU,
        maxConcurrentFonts: this.config.maxConcurrentFonts,
        singleDownload: this.config.singleDownload,
        createdAt: new Date().toISOString()
      }
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå README
  private generateReadme(): string {
    const stats = this.generateStatistics();
    
    return `# Lao Language Dataset with Style Effects

## Overview
This dataset contains ${stats.totalImages} images generated from ${stats.totalFonts} fonts with multiple style effects.

## üé® New Structure (Organized by Effects)
\`\`\`
fonts/
‚îú‚îÄ‚îÄ font1_name/
‚îÇ   ‚îú‚îÄ‚îÄ clear/                    # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ä‡∫±‡∫î‡ªÄ‡∫à‡∫ô
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ font1_text1_clear.${this.config.imageFormat}
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ font1_text2_clear.${this.config.imageFormat}
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ labels.json
‚îÇ   ‚îú‚îÄ‚îÄ blurred/                  # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫°‡∫ª‡∫ß
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ font1_text1_blurred.${this.config.imageFormat}
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ labels.json
‚îÇ   ‚îú‚îÄ‚îÄ faded/                    # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ä‡∫µ‡∫î
‚îÇ   ‚îú‚îÄ‚îÄ distorted/                # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ö‡∫¥‡∫î‡ªÄ‡∫ö‡∫∑‡ªâ‡∫≠‡∫ô
‚îÇ   ‚îú‚îÄ‚îÄ incomplete/               # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ö‡ªç‡ªà‡∫™‡∫ª‡∫°‡∫ö‡∫π‡∫ô
‚îÇ   ‚îú‚îÄ‚îÄ shadow/                   # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫°‡∫µ‡ªÄ‡∫á‡∫ª‡∫≤
‚îÇ   ‚îú‚îÄ‚îÄ aged/                     # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤
‚îÇ   ‚îú‚îÄ‚îÄ bold/                     # ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡ªú‡∫≤
‚îÇ   ‚îî‚îÄ‚îÄ font_summary.json         # ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏ô‡∏ï‡πå
‚îú‚îÄ‚îÄ font2_name/
‚îÇ   ‚îî‚îÄ‚îÄ ... (same structure)
‚îú‚îÄ‚îÄ statistics.json
‚îî‚îÄ‚îÄ README.md (this file)
\`\`\`

## üéØ Style Effects Included
- **clear**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ä‡∫±‡∫î‡ªÄ‡∫à‡∫ô - Standard clear text
- **blurred**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫°‡∫ª‡∫ß - Blurred text effect  
- **faded**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ä‡∫µ‡∫î - Faded/low opacity text
- **distorted**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ö‡∫¥‡∫î‡ªÄ‡∫ö‡∫∑‡ªâ‡∫≠‡∫ô - Distorted text
- **incomplete**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫ö‡ªç‡ªà‡∫™‡∫ª‡∫°‡∫ö‡∫π‡∫ô - Incomplete/missing pixels
- **shadow**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡∫°‡∫µ‡ªÄ‡∫á‡∫ª‡∫≤ - Text with shadow effect
- **aged**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤ - Aged/weathered text
- **bold**: ‡∫Æ‡∫π‡∫ö‡ªÅ‡∫ö‡∫ö‡ªú‡∫≤ - Bold/thick text

## Font Statistics
${stats.fontStatistics.map(font => 
  `- ${font.fontName}: ${font.imageCount} images (${font.percentage}%)`
).join('\n')}

## Category Distribution
${Object.entries(stats.categoryDistribution).map(([category, count]) => 
  `- ${category}: ${count} images`
).join('\n')}

## Generation Info
- Project: ${stats.generationInfo.projectName}
- Format: ${stats.generationInfo.imageFormat}
- GPU Acceleration: ${stats.generationInfo.useGPU ? 'Enabled' : 'Disabled'}
- Concurrent Fonts: ${stats.generationInfo.maxConcurrentFonts}
- Created: ${stats.generationInfo.createdAt}

## Usage
This dataset is suitable for:
- OCR training and testing
- Font recognition research
- Lao language processing
- Computer vision applications

Generated by Lao Font Craft - OCR Dataset Generator
`;
  }

  // ‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  private categorizeText(text: string): string {
    if (text.length === 1) return 'single_character';
    if (text.length <= 3) return 'single_syllable';
    if (text.length <= 6) return 'two_syllable';
    if (text.length <= 9) return 'three_syllable';
    if (text.length <= 12) return 'four_syllable';
    if (/[‡ªê-‡ªô0-9]/.test(text)) return 'contains_numbers';
    if (/[a-zA-Z]/.test(text)) return 'contains_english';
    if (text.includes(' ')) return 'phrase_or_sentence';
    return 'complex_word';
  }

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¢‡∏≤‡∏á‡∏Ñ‡πå
  private estimateSyllables(text: string): number {
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÇ‡∏î‡∏¢‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏£‡∏∞
    const vowelPattern = /[‡∫≤‡∫¥‡∫µ‡∫∂‡∫∑‡∫∏‡∫π‡∫ª‡∫≠‡ªÄ‡ªÅ‡ªÇ‡ªÑ‡ªÉ‡∫≥‡∫Ω]/g;
    const matches = text.match(vowelPattern);
    return matches ? matches.length : 1;
  }
}